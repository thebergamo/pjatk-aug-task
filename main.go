package main

import (
	"aug/ast"
	"aug/interfaces"
	"fmt"
	"io"
	"os"
)

type Error string

// Error fulfills the error interface of this type.
func (e Error) Error() string { return string(e) }

// LexParseErr is a permanent failure error to notify about borkage.
type LexParseErr struct {
	Err Error
	Str string
	Row int // this is zero-indexed (the first line is 0)
	Col int // this is zero-indexed (the first char is 0)

	// Filename is the file that this error occurred in. If this is unknown,
	// then it will be empty. This is not set when run by the basic LexParse
	// function.
	Filename string
}

// Error displays this error with all the relevant state information.
func (e *LexParseErr) Error() string {
	return fmt.Sprintf("%s: `%s` @%d:%d", e.Err, e.Str, e.Row+1, e.Col+1)
}

type lexParseAST struct {
	ast ast.Node
	row int
	col int

	lexerErr error // from lexer
	parseErr error // from Error(e string)

	variablesTable *interfaces.VariablesTable
}

func main() {
	var input io.Reader

	variablesTable := interfaces.MakeVariablesTable()
	lp := &lexParseAST{variablesTable: &variablesTable}

	// Check if a filename argument is provided
	if len(os.Args) > 1 {
		// Open the file for reading
		file, err := os.Open(os.Args[1])
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error opening file: %s\n", err)
			os.Exit(1)
		}
		defer file.Close()
		input = file
	} else {
		input = os.Stdin
	}
	lexer := NewLexerWithInit(input, func(y *Lexer) { y.parseResult = lp })

	yyParse(lexer) // writes the result to lp.ast

	if e := lp.parseErr; e != nil {
		fmt.Println("Parser Error", e)
	}
	if e := lp.lexerErr; e != nil {
		fmt.Println("Lexer Error", e)
	}

	var err error
	// Interpret the AST.
	interpreter := &ast.Interpreter{VariablesTable: lp.variablesTable}
	if lp.ast != nil {
		_, err = lp.ast.Interpret(interpreter)
		if err != nil {
			fmt.Println(err)
		}
	} else {
		fmt.Println("No AST was generated by the parser.")
	}

}

func interpret(node ast.Node, variablesTable *interfaces.VariablesTable) error {
	println("INTEPRETED")

	return nil
}
