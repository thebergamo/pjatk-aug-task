// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"aug/ast"
	"aug/interfaces"
	"strconv"
)

//line parser.y:11
type yySymType struct {
	yys  int
	str  string
	int  int
	bool bool

	node ast.Node

	val interfaces.Value

	row int
	col int
}

const STRING = 57346
const IDENT = 57347
const NUM = 57348
const STR_VAR = 57349
const INT_VAR = 57350
const OPEN_PAREN = 57351
const CLOSE_PAREN = 57352
const COMMA = 57353
const SEMICOLON = 57354
const PLUS = 57355
const MINUS = 57356
const MULTIPLY = 57357
const DIVIDE = 57358
const MOD = 57359
const EQ = 57360
const NEQ = 57361
const LT = 57362
const GT = 57363
const LTE = 57364
const GTE = 57365
const STR_EQ = 57366
const STR_NEQ = 57367
const AND = 57368
const OR = 57369
const NOT = 57370
const TRUE = 57371
const FALSE = 57372
const ASSIGN = 57373
const FN_PRINT = 57374
const FN_LENGTH = 57375
const FN_POSITION = 57376
const FN_CONCATENATE = 57377
const FN_SUBSTRING = 57378
const FN_READINT = 57379
const FN_READSTR = 57380
const IF = 57381
const THEN = 57382
const ELSE = 57383
const BEGIN = 57384
const END = 57385
const FOR = 57386
const TO = 57387
const DO = 57388
const BREAK = 57389
const CONTINUE = 57390
const EXIT = 57391
const ERROR = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"STRING",
	"IDENT",
	"NUM",
	"STR_VAR",
	"INT_VAR",
	"OPEN_PAREN",
	"CLOSE_PAREN",
	"COMMA",
	"SEMICOLON",
	"PLUS",
	"MINUS",
	"MULTIPLY",
	"DIVIDE",
	"MOD",
	"EQ",
	"NEQ",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"STR_EQ",
	"STR_NEQ",
	"AND",
	"OR",
	"NOT",
	"TRUE",
	"FALSE",
	"ASSIGN",
	"FN_PRINT",
	"FN_LENGTH",
	"FN_POSITION",
	"FN_CONCATENATE",
	"FN_SUBSTRING",
	"FN_READINT",
	"FN_READSTR",
	"IF",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"FOR",
	"TO",
	"DO",
	"BREAK",
	"CONTINUE",
	"EXIT",
	"ERROR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:194

// pos is a helper function used to track the position in the parser.
func pos(y yyLexer, dollar yySymType) {
	lp := cast(y)
	lp.row = dollar.row
	lp.col = dollar.col
	return
}

// cast is used to pull out the parser run-specific struct we store our AST in.
// this is usually called in the parser.
func cast(y yyLexer) *lexParseAST {
	x := y.(*Lexer).parseResult
	return x.(*lexParseAST)
}

// postLast pulls out the "last token" and does a pos with that. This is a hack!
func posLast(y yyLexer, dollars []yySymType) {
	// pick the last token in the set matched by the parser
	pos(y, dollars[len(dollars)-1]) // our pos
}

// cast is used to pull out the parser run-specific struct we store our AST in.
// this is usually called in the lexer.
func (yylex *Lexer) cast() *lexParseAST {
	return yylex.parseResult.(*lexParseAST)
}

// pos is a helper function used to track the position in the lexer.
func (yylex *Lexer) pos(lval *yySymType) {
	lval.row = yylex.Line()
	lval.col = yylex.Column()
	//log.Printf("lexer: %d x %d", lval.row, lval.col)
}

// Error is the error handler which gets called on a parsing error.
func (yylex *Lexer) Error(str string) {
	lp := yylex.cast()
	if str != "" {
		// This error came from the parser. It is usually also set when
		// the lexer fails, because it ends up generating ERROR tokens,
		// which most parsers usually don't match and store in the AST.
		err := Error(str)

		lp.parseErr = &LexParseErr{
			Err: err,
			Str: str,
			Row: lp.row,
			Col: lp.col,
		}
	}
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 30,
	24, 17,
	25, 17,
	-2, 10,
}

const yyPrivate = 57344

const yyLast = 184

var yyAct = [...]int8{
	26, 3, 34, 27, 99, 21, 28, 52, 53, 73,
	46, 18, 52, 53, 12, 20, 46, 48, 16, 44,
	62, 63, 43, 47, 96, 49, 103, 52, 53, 101,
	98, 112, 55, 60, 58, 56, 59, 57, 69, 100,
	113, 15, 74, 12, 104, 75, 77, 46, 13, 79,
	110, 7, 42, 14, 80, 85, 9, 10, 11, 83,
	84, 82, 78, 102, 19, 86, 72, 88, 89, 90,
	15, 91, 92, 71, 95, 93, 94, 13, 46, 40,
	7, 111, 14, 52, 53, 9, 10, 11, 116, 50,
	51, 52, 53, 29, 30, 35, 81, 68, 24, 52,
	53, 105, 107, 37, 106, 109, 76, 108, 67, 29,
	87, 41, 114, 52, 53, 115, 1, 25, 22, 23,
	6, 5, 38, 39, 32, 33, 36, 31, 29, 30,
	35, 8, 4, 45, 61, 70, 35, 54, 37, 45,
	32, 33, 81, 31, 37, 52, 53, 0, 2, 0,
	55, 60, 58, 56, 59, 57, 17, 38, 39, 32,
	33, 36, 31, 38, 39, 52, 53, 36, 97, 0,
	55, 60, 58, 56, 59, 57, 64, 65, 66, 0,
	0, 0, 62, 63,
}

var yyPact = [...]int16{
	-1000, -1000, 38, 6, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -20, 89, 74, 102, -1000, 9, 124, -17,
	-9, -1000, -1000, -1000, 89, 89, 152, -4, 161, -1000,
	-1000, -1000, 99, 88, -1000, -1000, -1000, 130, 64, 57,
	-22, 89, -1000, -1000, 100, 130, 89, 38, 89, 132,
	51, -11, 130, 130, 130, -1000, -1000, -1000, -1000, -1000,
	-1000, 105, -1000, -1000, 130, 130, 130, 105, 105, -1000,
	-1000, 105, 105, 130, 14, 158, 20, 86, -9, -37,
	-1000, -1000, -1000, 161, 161, 100, -1000, -1000, -1000, -1000,
	-1000, 28, 18, 53, 15, -1, -1000, -1000, -1000, 38,
	105, 130, -1000, 105, 130, -1000, 40, 70, 21, -6,
	-1000, 130, -1000, 38, 78, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 0, 6, 2, 3, 137, 134, 64, 15, 5,
	132, 131, 121, 120, 1, 148, 116,
}

var yyR1 = [...]int8{
	0, 16, 1, 1, 1, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 6, 6, 7,
	7, 8, 8, 9, 9, 9, 9, 9, 9, 12,
	12, 13, 10, 10, 11, 11, 11, 14, 14, 14,
	14, 14, 14, 14, 14, 15, 15,
}

var yyR2 = [...]int8{
	0, 1, 3, 3, 1, 3, 3, 3, 1, 1,
	1, 1, 2, 3, 4, 6, 1, 1, 1, 6,
	8, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 3, 2, 3, 3, 4,
	6, 8, 3, 3, 4, 4, 4, 1, 1, 1,
	3, 1, 1, 1, 1, 3, 0,
}

var yyChk = [...]int16{
	-1000, -16, -15, -14, -10, -12, -13, 42, -11, 47,
	48, 49, 5, 39, 44, 32, 12, -15, 31, -7,
	-8, -9, 29, 30, 9, 28, -1, -4, -2, 4,
	5, 38, 35, 36, -3, 6, 37, 14, 33, 34,
	5, 9, 43, -4, -1, 9, 27, 40, 26, -1,
	-7, -7, 13, 14, -5, 18, 21, 23, 20, 22,
	19, -6, 24, 25, 15, 16, 17, 9, 9, -1,
	5, 9, 9, 31, -1, -4, -7, -1, -8, -14,
	-9, 10, 10, -2, -2, -1, -4, 5, -3, -3,
	-3, -4, -4, -4, -4, -1, 10, 10, 10, 41,
	11, 11, 10, 11, 45, -14, -4, -1, -4, -1,
	10, 11, 10, 46, -1, -14, 10,
}

var yyDef = [...]int8{
	56, -2, 1, 0, 47, 48, 49, 56, 51, 52,
	53, 54, 0, 0, 0, 0, 55, 0, 0, 0,
	30, 32, 33, 34, 0, 0, 0, 0, 4, 16,
	-2, 18, 0, 0, 8, 9, 11, 0, 0, 0,
	0, 0, 50, 42, 43, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 21, 22, 23, 24, 25,
	26, 0, 27, 28, 0, 0, 0, 0, 0, 12,
	10, 0, 0, 0, 0, 0, 0, 0, 29, 39,
	31, 13, 35, 2, 3, 37, 38, 17, 5, 6,
	7, 0, 0, 0, 0, 0, 44, 45, 46, 0,
	0, 0, 14, 0, 0, 40, 0, 0, 0, 0,
	19, 0, 15, 0, 0, 41, 20,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:55
		{
			posLast(yylex, yyDollar) // our pos
			// store the AST in the struct that we previously passed in
			lp := cast(yylex)
			lp.ast = yyDollar[1].node
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:63
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.NumExprNode{Op: "+", Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:64
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.NumExprNode{Op: "-", Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:68
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.NumExprNode{Op: "*", Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:69
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.NumExprNode{Op: "/", Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:70
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.NumExprNode{Op: "%", Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:74
		{
			posLast(yylex, yyDollar)
			i, err := strconv.Atoi(yyDollar[1].str)
			if err != nil {
				yylex.Error("invalid integer: " + yyDollar[1].str)
			} else {
				yyVAL.node = &ast.NumLiteralNode{Value: i}
			}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:83
		{ // use the INT_VAR token here
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.VariableReferenceNode{Name: yyDollar[1].str}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:87
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.ReadIntNode{}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:88
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.UnaryOpNode{Op: "-", Operand: yyDollar[2].node}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:89
		{
			posLast(yylex, yyDollar)
			yyVAL.node = yyDollar[2].node
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:90
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.LengthNode{Str: yyDollar[3].node}
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:91
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.PositionNode{Str: yyDollar[3].node, Substr: yyDollar[5].node}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:94
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.StringLiteral{Value: yyDollar[1].str}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:95
		{ // use the STR_VAR token here
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.VariableReferenceNode{Name: yyDollar[1].str}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:99
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.ReadStr{}
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:103
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.Concatenate{Left: yyDollar[3].node, Right: yyDollar[5].node}
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:107
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.Substring{Str: yyDollar[3].node, Start: yyDollar[5].node, Length: yyDollar[7].node}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:113
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:116
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:117
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:122
		{
			posLast(yylex, yyDollar)
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.BoolLiteral{Value: true}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:134
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.BoolLiteral{Value: false}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:135
		{
			posLast(yylex, yyDollar)
			yyVAL.node = yyDollar[2].node
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:136
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.UnaryOpNode{Op: "!", Operand: yyDollar[2].node}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:140
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.BoolExprNode{Op: yyDollar[2].str, Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:144
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.BoolExprNode{Op: yyDollar[2].str, Left: yyDollar[1].node, Right: yyDollar[3].node}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:150
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.IfStatNode{Condition: yyDollar[2].node, ThenBranch: yyDollar[4].node}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:154
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.IfStatNode{Condition: yyDollar[2].node, ThenBranch: yyDollar[4].node, ElseBranch: yyDollar[6].node}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:160
		{
			yyVAL.node = &ast.ForStatNode{Identifier: yyDollar[2].str, Initial: yyDollar[4].node, Final: yyDollar[6].node, Body: yyDollar[8].node}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:165
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.AssignStatNode{Identifier: yyDollar[1].str, Value: yyDollar[3].node}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:169
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.AssignStatNode{Identifier: yyDollar[1].str, Value: yyDollar[3].node}

		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:176
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.PrintStatNode{Value: yyDollar[3].node}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:177
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.PrintStatNode{Value: yyDollar[3].node}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:178
		{
			posLast(yylex, yyDollar)
			yyVAL.node = &ast.PrintStatNode{Value: yyDollar[3].node}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:184
		{
			yyVAL.node = &ast.BlockNode{Statements: yyDollar[2].node.(*ast.NodeSequence).Nodes}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:186
		{
			yyVAL.node = &ast.BreakNode{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:187
		{
			yyVAL.node = &ast.ContinueNode{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:188
		{
			yyVAL.node = &ast.ExitNode{}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:191
		{
			yyVAL.node = &ast.NodeSequence{Nodes: append(yyDollar[1].node.(*ast.NodeSequence).Nodes, yyDollar[2].node)}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:192
		{
			yyVAL.node = &ast.NodeSequence{Nodes: []ast.Node{}}
		}
	}
	goto yystack /* stack new state and value */
}
